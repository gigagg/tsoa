"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.koaTemplate = "\n/* tslint:disable:forin */\nimport * as KoaRouter from 'koa-router';\n{{#if useSecurity}}\nimport { set } from 'lodash';\n{{/if}}\n{{#if authenticationModule}}\nimport { koaAuthentication } from '{{authenticationModule}}';\n{{/if}}\n\nexport function RegisterRoutes(router: KoaRouter) {\n    {{#each controllers}}\n    {{#each actions}}\n        router.{{method}}('{{../../basePath}}/{{../path}}{{path}}', \n            {{#if security}} \n            authenticateMiddleware('{{security.name}}'\n              {{#if security.scopes.length}} \n              , {{{json security.scopes}}}\n              {{/if}}\n            ), \n            {{/if}} \n            async (context, next) => {\n            const args = {\n                {{#each parameters}}\n                    {{@key}}: {{{json this}}},\n                {{/each}}\n            };\n\n            let validatedArgs: any[] = [];\n            try {\n              validatedArgs = getValidatedArgs(args, context);\n            } catch (error) {\n              context.status = error.status || 500;\n              context.body = error;\n              return next();\n            }\n\n            {{#if ../../iocModule}}\n            const controller = iocContainer.get<{{../name}}>({{../name}});\n            {{else}}\n            const controller = new {{../name}}();\n            {{/if}}\n\n            const promise = controller.{{name}}.apply(controller, validatedArgs);\n            let statusCode = undefined;\n            if (controller instanceof Controller) {\n                statusCode = (controller as Controller).getStatus();\n            }\n\n            return promiseHandler(promise, statusCode, context, next);\n        });\n    {{/each}}\n    {{/each}}\n  \n  {{#if useSecurity}}\n  function authenticateMiddleware(name: string, scopes: string[] = []) {\n      return async (context: any, next: any) => {\n          koaAuthentication(context.request, name, scopes).then((user: any) => {\n              set(context.request, 'user', user);\n              next();\n          })\n          .catch((error: any) => {\n              context.status = error.status || 401;\n              context.body = error;\n              next();\n        });\n     }\n  }\n  {{/if}}\n\n  function promiseHandler(promise: any, statusCode: any, context: KoaRouter.IRouterContext, next: () => Promise<any>) {\n      return promise\n        .then((data: any) => {\n          if (data) {\n            context.body = data;\n            context.status = (statusCode || 200)\n          } else {\n            context.status = (statusCode || 204)\n          }\n\n          next();\n        })\n        .catch((error: any) => {\n          context.status = error.status || 500;\n          context.body = error;\n          next();\n        });\n    }\n\n    function getValidatedArgs(args: any, context: KoaRouter.IRouterContext): any[] {\n        return Object.keys(args).map(key => {\n            const name = args[key].name;\n            switch (args[key].in) {\n            case 'request':\n                return context;\n            case 'query':\n                return ValidateParam(args[key], context.request.query[name], models, name)\n            case 'path':\n                return ValidateParam(args[key], context.params[name], models, name)\n            case 'header':\n                return ValidateParam(args[key], context.request.headers[name], models, name);\n            case 'body':\n                return ValidateParam(args[key], context.request.body, models, name);\n            case 'body-prop':\n                return ValidateParam(args[key], context.request.body[name], models, name);\n            }\n        });\n    }\n}";
//# sourceMappingURL=koa.js.map