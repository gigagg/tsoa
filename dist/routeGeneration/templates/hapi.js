"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// TODO: Replace this with HAPI middleware stuff
exports.hapiTemplate = "\n/* tslint:disable:forin */\nimport * as hapi from 'hapi';\n{{#if useSecurity}}\nimport { set } from 'lodash';\n{{/if}}\n{{#if authenticationModule}}\nimport { hapiAuthentication } from '{{authenticationModule}}';\n{{/if}}\n\nexport function RegisterRoutes(server: hapi.Server) {\n    {{#each controllers}}\n    {{#each actions}}\n        server.route({\n            method: '{{method}}',\n            path: '{{../../basePath}}/{{../path}}{{path}}',\n            config: { \n                {{#if security}} \n                pre: [\n                    { \n                      method: authenticateMiddleware('{{security.name}}'\n                              {{#if security.scopes.length}} \n                              , {{{json security.scopes}}}\n                              {{/if}}\n                    )}\n                ],\n                {{/if}} \n                handler: (request: any, reply) => {\n                    const args = {\n                        {{#each parameters}}\n                            {{@key}}: {{{json this}}},\n                        {{/each}}\n                    };\n\n                    let validatedArgs: any[] = [];\n                    try {\n                        validatedArgs = getValidatedArgs(args, request);\n                    } catch (err) {\n                        return reply(err).code(err.status || 500);\n                    }\n\n                    {{#if ../../iocModule}}\n                    const controller = iocContainer.get<{{../name}}>({{../name}});\n                    {{else}}\n                    const controller = new {{../name}}();\n                    {{/if}}\n\n                    const promise = controller.{{name}}.apply(controller, validatedArgs);\n                    let statusCode = undefined;\n                    if (controller instanceof Controller) {\n                        statusCode = (controller as Controller).getStatus();\n                    }\n                    return promiseHandler(promise, statusCode, request, reply);\n                }\n            }\n        });\n    {{/each}}\n    {{/each}}\n\n    {{#if useSecurity}}\n    function authenticateMiddleware(name: string, scopes: string[] = []) {\n      return (request: hapi.Request, reply: hapi.IReply) => {\n            hapiAuthentication(request, name, scopes).then((user: any) => {\n                set(request, 'user', user);\n                reply.continue();\n            })\n            .catch((error: any) => reply(error).code(error.status || 401));\n      }\n    }\n    {{/if}}\n\n    function promiseHandler(promise: any, statusCode: any, request: hapi.Request, reply: hapi.IReply) {\n      return promise\n        .then((data: any) => {\n          if (data) {\n            return reply(data).code(statusCode || 200);\n          } else {\n            return (reply as any)().code(statusCode || 204);\n          }\n        })\n        .catch((error: any) => reply(error).code(error.status || 500));\n    }\n\n    function getValidatedArgs(args: any, request: hapi.Request): any[] {\n        return Object.keys(args).map(key => {\n            const name = args[key].name;\n            switch (args[key].in) {\n            case 'request':\n                return request;\n            case 'query':\n                return ValidateParam(args[key], request.query[name], models, name)\n            case 'path':\n                return ValidateParam(args[key], request.params[name], models, name)\n            case 'header':\n                return ValidateParam(args[key], request.headers[name], models, name);\n            case 'body':\n                return ValidateParam(args[key], request.payload, models, name);\n             case 'body-prop':\n                return ValidateParam(args[key], request.payload[name], models, name);\n            }\n        });\n    }\n}";
//# sourceMappingURL=hapi.js.map